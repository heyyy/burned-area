#summary Version 1.0.0 (initial release) of the burned area ECV software.

== Burned-Area Version 1.0.0 Release Notes ==
Release Date: September 6, 2013

=== Downloads ===
* Burned Area source code - available via the [http://code.google.com/p/burned-area/source/checkout Burned-Area Google Projects Source] link

=== Installation ===
  # Install dependent libraries - HDF-EOS GCTP, HDF4, HDF-EOS2, TIFF, GeoTIFF, JPEG, SZIP, ZLIB, Boost, and OpenCV.
  # Set up environment variables.  Can create an environment shell file or add the following to your bash shell.  For C shell, use 'setenv VAR "directory"'.
{{{
    export HDFEOS_GCTPINC="path_to_HDF-EOS_GCTP_include_files"
    export HDFEOS_GCTPLIB="path_to_HDF-EOS_GCTP_libraries"
    export TIFFINC="path_to_TIFF_include_files"
    export TIFFLIB="path_to_TIFF_libraries"
    export GEOTIFF_INC="path_to_GEOTIFF_include_files"
    export GEOTIFF_LIB="path_to_GEOTIFF_libraries"
    export HDFINC="path_to_HDF_include_files"
    export HDFLIB="path_to_HDF_libraries"
    export HDFEOS_INC="path_to_HDFEOS_include_files"
    export HDFEOS_LIB="path_to_HDFEOS_libraries"
    export SZIPINC="path_to_SZIP_include_files"
    export SZIPLIB="path_to_SZIP_libraries"
    export JPEGINC="path_to_JPEG_include_files"
    export JPEGLIB="path_to_JPEG_libraries"
    export ZLIBINC="path_to_ZLIB_include_files"
    export ZLIBLIB="path_to_ZLIB_libraries"
    export BOOST_INC="path_to_Boost_include_files"
    export BOOST_LIB="path_to_Boost_libraries"
    export OPENCINC="path_to_modified_OpenCV_include_files"
    export OPENCV_LIB="path_to_modified_OpenCV_libraries"
    export BIN="path_to_directory_for_burned_area_binaries"
}}}
  # Modify the OpenCV code in modules/ml via the patch files that are provided in the src/boosted_regression directory.  Then rebuild OpenCV with the patched files.  The patches were generated by using `diff -Naur $original_file $modified_file`
    * gbt.cpp  --> `cd modules/ml/src; patch < {BA_base}/src/boosted_regression/opencv_patches/gbt.cpp.patch`
    * ml.hpp  --> `cd modules/ml/include/opencv2/ml; patch < {BA_base}/src/boosted_regression/opencv_patches/ml.hpp.patch`
    * Rebuild OpenCV with the patched files
  # Checkout (from Google burned-area project) and install source files
{{{
cd {BA_base}/src/seasonal_summaries
make (make -f Makefile.static for static builds)
make install

cd {BA_base}/src/boosted_regression
make (make -f Makefile.static for static builds)
make install
}}}
This will create several executable files and Python scripts under $BIN(tested in the gcc compiler)

* Note that the Python scripts and C++ code rely on GDAL command-line executables, so GDAL will need to be installed and available in the $PATH.

=== Dependencies ===
  * GCTP library
  * TIFF library
  * GeoTIFF library
  * HDF4 library
  * HDF-EOS2 library
  * JPEG library
  * ZLIB library
  * SZIP library
  * Boost library
  * OpenCV library (modified with the patches from the boosted regression src directory)
  * GDAL command-line utilities

=== Verification Data ===

=== User Manual ===
There are currently two applications associated with the burned area ECV.  The first application is the seasonal summaries, which generates the seasonal summaries and annual maximums for an input temporal stack of scenes for a given path/row.  The application determines the maximum geographic extents for the given stack, resamples each scene to this maximum geographic extent, then generates seasonal summaries for the reflective bands and index products (NBR, NBR2, NDVI, NDMI) along with a mask for the seasons and year.  This application also generates annual maximums for the index products.  (See the usage information via `process_temporal_ba_stack.py --help`.)

The second application is a scene-based probability mapping using a gradient boosting tree to predict the probability that any pixel is burned.  This application relies on the seasonal summaries and annual maximums generated in the previous step.  The appliction will create a single band product for the scene containing the burn probabilities.  (See the usage information via `do_boosted_regression.py --help`.)

The boosted regression code allows a model to be trained and saved so that it can be loaded later for model predictions.  The training and prediction can also occur during the same run, depending on the input parameters provided in the parameter file.  In order to run model predictions for any scene, the model must first have been trained and then loaded.

A third application is yet to be delivered, but will be a filter run on the probability mappings as a final step in determining the burned pixels.

=== Product Guide ===
The output product is a gridded HDF-EOS file for the desired Landsat scene.  The file contains a burn_probability_mapping SDS bit, which is a signed 16-bit integer, where values between 0 and 100 represent the probability that the pixel is burned.  Fill values are flagged as -9999 and cloud or water pixels are flagged with -9998.